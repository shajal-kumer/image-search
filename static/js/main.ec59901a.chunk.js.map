{"version":3,"sources":["contexts/ImageContext.js","components/ImageSearch.jsx","components/LoadMore.jsx","components/ImageList.jsx","components/ImageView.jsx","App.js","serviceWorker.js","index.js"],"names":["API_KEY","ImageContext","createContext","ImageContextProvider","state","images","error","visible","loadMore","handleGetRequest","e","a","preventDefault","searchValue","target","elements","value","url","fetch","request","json","response","setState","hits","handleImageLoad","length","localStorage","setItem","JSON","parse","getItem","parseInt","this","stringify","Provider","props","children","Component","ImageSearch","useContext","className","onSubmit","type","autoComplete","name","placeholder","LoadMore","style","display","onClick","ImageList","slice","map","image","key","id","marginBottom","src","largeImageURL","alt","tags","to","pathname","ImageView","location","owner","user","pageURL","href","App","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ec59901a.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect, Component } from 'react';\n\nconst API_KEY = '16545790-0e8100c6b2ac3c626b69e46b4';\n\nexport const ImageContext = createContext();\n\nclass ImageContextProvider extends Component {\n\t// const [images, setImages] = useState([]);\n\t// const [error, setError] = useState('');\n\t// const [visible, setVisible] = useState(9);\n\n\tstate = {\n\t\timages: [],\n\t\terror: null,\n\t\tvisible: 9,\n\t\tloadMore: false,\n\t};\n\thandleGetRequest = async (e) => {\n\t\te.preventDefault();\n\t\tconst searchValue = e.target.elements.searchValue.value;\n\t\tconst url = `https://pixabay.com/api/?key=${API_KEY}&q=${searchValue}&image_type=photo&per_page=200`;\n\n\t\tconst request = await fetch(url);\n\t\tconst response = await request.json();\n\t\tif (!searchValue) {\n\t\t\tthis.setState({ error: 'Please provide a value' });\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\timages: response.hits,\n\t\t\t\terror: null,\n\t\t\t\tloadMore: true,\n\t\t\t});\n\t\t}\n\t};\n\n\tcomponentDidMount() {\n\t\tconst images = JSON.parse(localStorage.getItem('images'));\n\t\tconst visible = localStorage.getItem('visible')\n\t\t\t? parseInt(localStorage.getItem('visible'))\n\t\t\t: 9;\n\n\t\tif (images === null || images.length === 0) {\n\t\t\tthis.setState({ images: [], loadMore: false, visible: 9 });\n\t\t} else {\n\t\t\tlet loadMore = true;\n\t\t\tif (visible >= images.length) loadMore = false;\n\t\t\tthis.setState({ images, loadMore, visible });\n\t\t}\n\t}\n\n\tcomponentDidUpdate() {\n\t\tlocalStorage.setItem('images', JSON.stringify(this.state.images));\n\t}\n\n\thandleImageLoad = (e) => {\n\t\tlet { visible, images } = this.state;\n\t\tvisible += 9;\n\t\tthis.setState({\n\t\t\tvisible,\n\t\t});\n\n\t\tif (visible >= images.length) {\n\t\t\tthis.setState({\n\t\t\t\tloadMore: false,\n\t\t\t});\n\t\t}\n\t\tlocalStorage.setItem('visible', visible);\n\t};\n\n\trender() {\n\t\tconst { images, error, visible, loadMore } = this.state;\n\t\treturn (\n\t\t\t<ImageContext.Provider\n\t\t\t\tvalue={{\n\t\t\t\t\timages: images,\n\t\t\t\t\terror: error,\n\t\t\t\t\thandleGetRequest: this.handleGetRequest,\n\t\t\t\t\tvisible,\n\t\t\t\t\thandleImageLoad: this.handleImageLoad,\n\t\t\t\t\tloadMore,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{this.props.children}\n\t\t\t</ImageContext.Provider>\n\t\t);\n\t}\n}\n\nexport default ImageContextProvider;\n","import React, { useContext } from 'react';\nimport { ImageContext } from '../contexts/ImageContext';\n\nconst ImageSearch = () => {\n\tconst { handleGetRequest } = useContext(ImageContext);\n\treturn (\n\t\t<div className='imageSearch'>\n\t\t\t<form className='imageSearch__form' onSubmit={handleGetRequest}>\n\t\t\t\t<input\n\t\t\t\t\ttype='text'\n\t\t\t\t\tautoComplete='off'\n\t\t\t\t\tname='searchValue'\n\t\t\t\t\tplaceholder='Search for images...'\n\t\t\t\t/>\n\n\t\t\t\t<button>Search</button>\n\t\t\t</form>\n\t\t</div>\n\t);\n};\n\nexport default ImageSearch;\n","import React, { useContext } from 'react';\nimport { ImageContext } from '../contexts/ImageContext';\n\nconst LoadMore = () => {\n\tconst { loadMore, handleImageLoad } = useContext(ImageContext);\n\treturn (\n\t\t<button\n\t\t\tclassName='load-more'\n\t\t\tstyle={{ display: loadMore ? 'inline-block' : 'none' }}\n\t\t\tonClick={handleImageLoad}\n\t\t>\n\t\t\tLoad More\n\t\t</button>\n\t);\n};\n\nexport default LoadMore;\n","import React, { Fragment, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { ImageContext } from '../contexts/ImageContext';\nimport ImageSearch from './ImageSearch';\nimport LoadMore from './LoadMore';\n\nconst ImageList = () => {\n\tconst { images, visible } = useContext(ImageContext);\n\treturn (\n\t\t<Fragment>\n\t\t\t<ImageSearch />\n\t\t\t<div className='container'>\n\t\t\t\t<div className='row'>\n\t\t\t\t\t{images.slice(0, visible).map((image) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={image.id}\n\t\t\t\t\t\t\t\tclassName='col-md-4'\n\t\t\t\t\t\t\t\tstyle={{ marginBottom: '2rem' }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<div className='imageList__container'>\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tclassName='imageList__image'\n\t\t\t\t\t\t\t\t\t\tsrc={image.largeImageURL}\n\t\t\t\t\t\t\t\t\t\talt={image.tags}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className='image__details'>\n\t\t\t\t\t\t\t\t\t<button>\n\t\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\t\tto={{\n\t\t\t\t\t\t\t\t\t\t\t\tpathname: `/image/${image.id}`,\n\t\t\t\t\t\t\t\t\t\t\t\tstate: { image: image },\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\t\t\t\tView{' '}\n\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<LoadMore />\n\t\t</Fragment>\n\t);\n};\n\nexport default ImageList;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst ImageView = (props) => {\n\tconst {\n\t\tlargeImageURL: image,\n\t\ttags,\n\t\tuser: owner,\n\t\tpageURL,\n\t} = props.location.state.image;\n\treturn (\n\t\t<div className='container'>\n\t\t\t<div className='row'>\n\t\t\t\t<div className='col-sm-12'>\n\t\t\t\t\t<div className='imageView__container'>\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tclassName='imageView__img img-responsive'\n\t\t\t\t\t\t\tsrc={image}\n\t\t\t\t\t\t\talt={tags}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div className='imageView__copyright'>\n\t\t\t\t\t\t\t<p>&copy;pixabay</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='imageView__text'>\n\t\t\t\t\t\t\t<h4>\n\t\t\t\t\t\t\t\tCredit: <span>{owner}</span>\n\t\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t\t<h4>\n\t\t\t\t\t\t\t\tDownload:{' '}\n\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t<a target='_blank' href={pageURL}>\n\t\t\t\t\t\t\t\t\t\tGo To Download\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</h4>\n\n\t\t\t\t\t\t\t<button className='active-recipe__button'>\n\t\t\t\t\t\t\t\t<Link to='/'> Home</Link>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default ImageView;\n","import React from 'react';\nimport ImageContextProvider from './contexts/ImageContext';\n\nimport ImageList from './components/ImageList';\nimport { Route, BrowserRouter, Switch } from 'react-router-dom';\nimport ImageView from './components/ImageView';\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<ImageContextProvider>\n\t\t\t\t<BrowserRouter>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path='/:id' component={ImageView} />\n\t\t\t\t\t\t<Route exact path='/' component={ImageList} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</BrowserRouter>\n\t\t\t</ImageContextProvider>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}